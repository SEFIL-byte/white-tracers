local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer
local mouse = localPlayer:GetMouse()

local tracers = {}  -- Table to store the tracer Drawing objects

-- Function to create a new tracer for a player
local function createTracer(player)
    local tracer = Drawing.new("Line")
    tracer.Color = Color3.fromRGB(255, 255, 255)  -- Set the tracer color to white
    tracer.Thickness = 1  -- Thinner tracer
    tracer.Visible = false  -- Initially hidden until updated
    tracers[player] = tracer
end

-- Function to update tracers
local function updateTracers()
    local mousePosition = Vector2.new(mouse.X, mouse.Y)  -- Get the mouse position in 2D space

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = player.Character.HumanoidRootPart
            local screenPosition, onScreen = camera:WorldToViewportPoint(humanoidRootPart.Position)

            local tracer = tracers[player]
            if not tracer then
                createTracer(player)
                tracer = tracers[player]
            end

            if onScreen then
                -- Set the color to white
                tracer.Color = Color3.fromRGB(255, 255, 255)  -- White color

                -- Position the tracer from the mouse to the player's position in 3D space
                -- Convert the 3D world coordinates to 2D screen coordinates
                local mousePos = camera:WorldToViewportPoint(mouse.Hit.p)
                local playerPos = camera:WorldToViewportPoint(humanoidRootPart.Position)

                -- Use Z-position for depth and ensure proper direction of the tracer
                local startPos = Vector2.new(mousePos.X, mousePos.Y)
                local endPos = Vector2.new(playerPos.X, playerPos.Y)

                -- Calculate a 3D depth-adjusted position based on the Z-values of the mouse and the player's position
                tracer.From = startPos
                tracer.To = endPos
                tracer.Visible = true
            else
                tracer.Visible = false
            end
        end
    end
end

-- Function to handle player joining
local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function()
        createTracer(player)
    end)
end

-- Function to handle player leaving
local function onPlayerRemoved(player)
    if tracers[player] then
        tracers[player]:Remove()  -- Remove the tracer when the player leaves
        tracers[player] = nil
    end
end

-- Connect player added/removed events
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoved)

-- Initialize tracers for all existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createTracer(player)
    end
end

-- Continuously update tracers every frame
RunService.RenderStepped:Connect(updateTracers)
